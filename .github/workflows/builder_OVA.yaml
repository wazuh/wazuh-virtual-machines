run-name: Build OVA ${{ inputs.id }} ${{ inputs.is_stage && ' - is stage' || '' }}${{ inputs.checksum && ' - checksum' || '' }} - Branch ${{ github.ref_name }} - Launched by @${{ github.actor }}
name: Build OVA

on:
  workflow_dispatch:
    inputs:
      id:
        description: "ID used to identify the workflow uniquely."
        type: string
        required: false
      checksum:
        type: boolean
        description: |
          Generate package checksum.
          Default is 'false'.
        required: false
      wazuh_virtual_machines_reference:
        description: 'Branch or tag of the wazuh-virtual-machines repository'
        required: true
      wazuh_automation_reference:
        description: 'Branch or tag of the wazuh-automation repository'
        required: true
        default: '6.0.0'
      is_stage:
        description: "Is stage?"
        type: boolean
        default: false
      ova_revision:
        type: string
        description: 'Revision of the OVA file. Use "0" for development builds'
        required: true
        default: '0'
      wazuh_package_type:
        description: 'Wazuh package type to be used in the OVA'
        required: true
        default: 'dev'
        type: choice
        options:
          - prod
          - pre-prod
          - dev
      commit_list:
        description: |
          'Wazuh components revisions (comma-separated string list) ["indexer-revision", "server-revision", "dashboard-revision"]'
          (Only needed if the Wazuh package type is dev-latest or dev-commit)
        required: true
        default: '["latest", "latest", "latest", "latest"]'
        type: string
      destroy:
        description: 'Destroy the base instance after the OVA is created'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      id:
        type: string
        required: false
      checksum:
        type: boolean
        required: false

env:
    COMPOSITE_NAME: "linux-amazon-2023-amd64"
    INSTANCE_TYPE: "metal"
    AWS_REGION: "us-east-1"
    ALLOCATOR_PATH: "/tmp/allocatorvm_ova"
    WORKFLOW_VENV: "${{ github.workspace }}/workflow_venv"
    S3_BUCKET_TO_STORE_OVA: ${{ vars.AWS_S3_BUCKET }}
    S3_PATH_TO_STORE_OVA: "development/wazuh/6.x/secondary/ova"
    COMMIT_LIST: ${{ inputs.commit_list }}
    PROD_ARTIFACTS_URLS_BUCKET: ${{ vars.AWS_S3_BUCKET_PROD }}
    PRE_PROD_ARTIFACTS_URLS_BUCKET: ${{ vars.AWS_S3_BUCKET_PRE }}
    DEV_ARTIFACTS_URLS_BUCKET: ${{ vars.AWS_S3_BUCKET_ARTIFACTS }}
    ARTIFACTS_URLS_FILENAME: "artifacts_urls.yml"
    DEV_ARTIFACTS_URLS_PATH: "deployment/WAZUH_MINOR"
    GENERATE_PRESIGNED_URLS_SCRIPT_PATH: ${{ github.workspace }}/.github/scripts/generate_presigned_dev_urls.py
    WVM_REPO_NAME: ${{ github.event.repository.name }}
    WVM_REPOSITORY_PATH: "https://github.com/${{ github.repository }}.git"
    OVA_SCRIPTS_PATH: "${{ github.workspace }}/utils/scripts/ova_build"
    OVA_SET_DEFAULT_SCRIPT_NAME: "setOVADefault.sh"
    OVA_OVF_TEMPLATE_NAME: "wazuh_ovf_template"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  build_and_run:
    runs-on: ubuntu-22.04
    steps:
      - name: View parameters
        run: echo "${{ toJson(inputs) }}"

      - name: Checkout wazuh/wazuh-virtual-machines repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.wazuh_virtual_machines_reference }}

      - name: Checkout wazuh/wazuh-automation repository
        uses: actions/checkout@v4
        with:
          repository: wazuh/wazuh-automation
          ref: ${{ inputs.wazuh_automation_reference }}
          token: ${{ secrets.GH_CLONE_TOKEN }}
          path: wazuh-automation

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_OVA_ROLE }}
          role-session-name: "OVA-Builder"
          aws-region: "${{ env.AWS_REGION }}"
          role-duration-seconds: 18000 # Set the duration of the role session to 5 hours

      - name: Install and configure python and workflow dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          sudo apt-get install -y python3 python3-venv
          python3 -m venv ${{ env.WORKFLOW_VENV }}
          source ${{ env.WORKFLOW_VENV }}/bin/activate
          pip install --upgrade pip
          pip install pyyaml

      - name: Get Wazuh version
        run: |
          WAZUH_VERSION=$(jq -r '.version' VERSION.json)
          WAZUH_MINOR=$(echo "$WAZUH_VERSION" | cut -d '.' -f 1-2)
          echo WAZUH_VERSION=$WAZUH_VERSION >> $GITHUB_ENV
          echo WAZUH_MINOR=$WAZUH_MINOR >> $GITHUB_ENV

      - name: Setting FILENAME var
        run: |
          COMMIT_SHA=$(git rev-parse --short ${{ github.sha }})
          FILENAME="wazuh-${{ env.WAZUH_VERSION }}-${{ inputs.OVA_REVISION }}"

          if [ ${{ inputs.is_stage }} == false ]; then
            FILENAME="${FILENAME}-${COMMIT_SHA}"
          fi

          echo "FILENAME=$FILENAME" >> $GITHUB_ENV
          FILENAME_OVA="${FILENAME}.ova"
          echo "FILENAME_OVA=$FILENAME_OVA" >> $GITHUB_ENV
          FILENAME_SHA="${FILENAME}.ova.sha512"
          echo "FILENAME_SHA=$FILENAME_SHA" >> $GITHUB_ENV

      - name: Install and set allocator requirements
        run: |
          pip3 install -r wazuh-automation/deployability/deps/requirements.txt

      - name: Execute allocator module that will create the base instance
        id: alloc_vm_ova
        run: |
          python3 wazuh-automation/deployability/modules/allocation/main.py --action create --provider aws --size ${{ env.INSTANCE_TYPE }} --composite-name ${{ env.COMPOSITE_NAME }} --working-dir ${{ env.ALLOCATOR_PATH }} \
            --track-output ${{ env.ALLOCATOR_PATH }}/track.yml --inventory-output ${{ env.ALLOCATOR_PATH }}/inventory.yml --instance-name gha_${{ github.run_id }}_ova_build \
            --label-team devops --label-termination-date 1d

          INSTANCE_HOSTNAME=$(yq '.all.hosts.[].ansible_host' ${{ env.ALLOCATOR_PATH }}/inventory.yml)
          INSTANCE_PORT=$(yq '.all.hosts.[].ansible_port' ${{ env.ALLOCATOR_PATH }}/inventory.yml)
          INSTANCE_KEY=$(yq '.all.hosts.[].ansible_ssh_private_key_file' ${{ env.ALLOCATOR_PATH }}/inventory.yml)
          INSTANCE_USER=$(yq '.all.hosts.[].ansible_user' ${{ env.ALLOCATOR_PATH }}/inventory.yml)
          echo INSTANCE_HOSTNAME=$INSTANCE_HOSTNAME >> $GITHUB_ENV
          echo INSTANCE_PORT=$INSTANCE_PORT >> $GITHUB_ENV
          echo INSTANCE_KEY=$INSTANCE_KEY >> $GITHUB_ENV
          echo INSTANCE_USER=$INSTANCE_USER >> $GITHUB_ENV

      - name: Get artifacts URLs file
        run: |
          LOCAL_ARTIFACTS_URLS_FILEPATH=${{ github.workspace }}/${{ env.ARTIFACTS_URLS_FILENAME }}
          echo LOCAL_ARTIFACTS_URLS_FILEPATH=$LOCAL_ARTIFACTS_URLS_FILEPATH >> $GITHUB_ENV

          if [ "${{ inputs.wazuh_package_type }}" == "prod" ]; then
            aws s3api get-object --bucket ${{ env.PROD_ARTIFACTS_URLS_BUCKET }} --key ${{ env.WAZUH_MINOR }}/${{ env.ARTIFACTS_URLS_FILENAME }} $LOCAL_ARTIFACTS_URLS_FILEPATH
          elif [ "${{ inputs.wazuh_package_type }}" == "pre-prod" ]; then
            aws s3api get-object --bucket ${{ env.PRE_PROD_ARTIFACTS_URLS_BUCKET }} --key ${{ env.WAZUH_MINOR }}/${{ env.ARTIFACTS_URLS_FILENAME }} $LOCAL_ARTIFACTS_URLS_FILEPATH
          else
            PARSED_DEV_ARTIFACTS_URLS_PATH=$(echo "${{ env.DEV_ARTIFACTS_URLS_PATH }}" | sed "s|WAZUH_MINOR|${{ env.WAZUH_MINOR }}|")
            aws s3api get-object --bucket ${{ env.DEV_ARTIFACTS_URLS_BUCKET }} --key $PARSED_DEV_ARTIFACTS_URLS_PATH/${{ env.ARTIFACTS_URLS_FILENAME }} $LOCAL_ARTIFACTS_URLS_FILEPATH
          fi

      - name: Generate presigned URLs for artifacts for dev packages
        if: inputs.wazuh_package_type == 'dev'
        run: |
          python ${{ env.GENERATE_PRESIGNED_URLS_SCRIPT_PATH }}

      - name: Install necessary dependencies in the AWS instance to create the OVA
        run: |
          ssh -p ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              -o 'StrictHostKeyChecking no' \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }} << EOF
            set -e
            sudo yum install -y python3-pip git
            sudo pip3 install hatch
          EOF

      - name: Clone repo on remote instance
        run: |
          ssh -p ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              -o 'StrictHostKeyChecking no' \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }} << EOF
            set -e
            git clone -b ${{ inputs.wazuh_virtual_machines_reference }} ${{ env.WVM_REPOSITORY_PATH }}
          EOF

      - name: Copy artifacts URLs file to remote instance
        run: |
          scp -P ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              "${{ env.LOCAL_ARTIFACTS_URLS_FILEPATH }}" \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }}:~/${{ env.WVM_REPO_NAME }}

      - name: Run the OVA PreConfigurer module
        run: |
          ssh -p ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              -o 'StrictHostKeyChecking no' \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }} << EOF
            set -e
            cd ${{ env.WVM_REPO_NAME }}
            sudo hatch run dev-ova-pre-configurer:run
          EOF

      - name: Run the OVA PostConfigurer module
        run: |
          ssh -p ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              -o 'StrictHostKeyChecking no' \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }} << EOF
            set -e
            cd ${{ env.WVM_REPO_NAME }}
            sudo vagrant ssh -c 'cd /tmp/wazuh-virtual-machines && sudo hatch run dev-ova-post-configurer:run --packages-url-path ${{ env.ARTIFACTS_URLS_FILENAME }}'
          EOF

      - name: Stop the Vagrant VM, modify the network and export it as OVA
        run: |
          ssh -p ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              -o 'StrictHostKeyChecking no' \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }} << EOF
            set -e
            cd ${{ env.WVM_REPO_NAME }}
            sudo vagrant halt
            sudo vboxmanage modifyvm ova_base --nic2 hostonly
            sudo vboxmanage modifyvm ova_base --cableconnected2 on
            sudo vboxmanage export ova_base --output ${{ env.FILENAME_OVA }}
            sudo chmod 0755 ${{ env.FILENAME_OVA }}
          EOF

      - name: Getting OVA from AWS instance
        run: |
          scp -P ${{ env.INSTANCE_PORT }} \
              -i ${{ env.INSTANCE_KEY }} \
              ${{ env.INSTANCE_USER }}@${{ env.INSTANCE_HOSTNAME }}:~/${{ env.WVM_REPO_NAME }}/${{ env.FILENAME_OVA }} ${{ github.workspace }}/${{ env.FILENAME_OVA }}

      - name: Standarizing OVA
        run: |
          sudo chmod 0777 ${{ env.OVA_SCRIPTS_PATH }}/${{ env.OVA_SET_DEFAULT_SCRIPT_NAME }}
          sed -i "s|ovf:capacity=\"40\"|ovf:capacity=\"50\"|g" ${{ env.OVA_SCRIPTS_PATH }}/${{ env.OVA_OVF_TEMPLATE_NAME }}
          sudo bash ${{ env.OVA_SCRIPTS_PATH }}/${{ env.OVA_SET_DEFAULT_SCRIPT_NAME }} "${{ env.OVA_SCRIPTS_PATH }}/" "${{ github.workspace }}/${{ env.FILENAME_OVA }}" "${{ github.workspace }}/${{ env.FILENAME_OVA }}" ${{ env.OVA_SCRIPTS_PATH }}/${{ env.OVA_OVF_TEMPLATE_NAME }} "${{ env.WAZUH_VERSION }}"

      - name: Exporting OVA to final repository
        run: |
          aws s3 cp --quiet ${{ github.workspace }}/${{ env.FILENAME_OVA }} s3://${{ env.S3_BUCKET_TO_STORE_OVA }}/${{ env.S3_PATH_TO_STORE_OVA }}/${{ env.FILENAME_OVA }}
          s3uri="s3://${{ env.S3_BUCKET_TO_STORE_OVA }}/${{ env.S3_PATH_TO_STORE_OVA }}/${{ env.FILENAME_OVA }}"
          echo "S3 OVA URI: ${s3uri}"

      - name: Generating sha512 file
        if: ${{ inputs.checksum == true }}
        run: |
          sha512sum ${{ github.workspace }}/${{ env.FILENAME_OVA }} > ${{ github.workspace }}/${{ env.FILENAME_SHA }}
          aws s3 cp --quiet /tmp/${{ env.FILENAME_SHA }} s3://${{ env.S3_BUCKET_TO_STORE_OVA }}/${{ env.S3_PATH_TO_STORE_OVA }}/${{ env.FILENAME_SHA }}
          s3uri="s3://${{ env.S3_BUCKET_TO_STORE_OVA }}/${{ env.S3_PATH_TO_STORE_OVA }}/${{ env.FILENAME_SHA }}"
          echo "S3 sha512 OVA URI: ${s3uri}"

      - name: Delete allocated VM
        if: always() && steps.alloc_vm_ova.outcome == 'success' && inputs.destroy == true
        run: python3 wazuh-automation/deployability/modules/allocation/main.py --action delete --track-output ${{ env.ALLOCATOR_PATH }}/track.yml

      - name: Compress Allocator directory
        id: generate_artifacts
        if: always() && steps.alloc_vm_ova.outcome == 'success' && inputs.destroy == false
        run: zip -P "${{ secrets.ZIP_ARTIFACTS_PASSWORD }}" -r ${{ env.ALLOCATOR_PATH }}.zip ${{ env.ALLOCATOR_PATH }}
        continue-on-error: true

      - name: Upload Allocator directory as artifact
        if: always() && steps.generate_artifacts.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: instance_info
          path: ${{ env.ALLOCATOR_PATH }}.zip
