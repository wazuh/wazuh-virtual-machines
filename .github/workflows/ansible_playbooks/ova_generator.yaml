- hosts: all
  become: true

  tasks:
    - name: Update all the packages
      yum:
        name: '*'
        state: latest

    - name: Install pip
      yum:
        name: python3-pip
        state: present

    - name: Download VirtualBox installer script
      get_url:
        url: https://download.virtualbox.org/virtualbox/7.1.4/VirtualBox-7.1.4-165100-Linux_amd64.run
        dest: /tmp/VirtualBox.run

    - name: Make the installer script executable
      file:
        path: /tmp/VirtualBox.run
        mode: '0755'

    - name: Install required packages for building kernel modules
      yum:
        name:
          - kernel-devel
          - kernel-headers
          - dkms
          - elfutils-libelf-devel
          - gcc
          - make
          - perl
        state: present
      become: true

    - name: Run VirtualBox installer script
      command: bash /tmp/VirtualBox.run
      become: true

    - name: Update all the packages
      yum:
        name: '*'
        state: latest

    - name: Install Development tools
      command: dnf groupinstall "Development Tools" -y
      become: true

    - name: Rebuild the VirtualBox kernel modules
      command: /sbin/vboxconfig

    - name: Install utilities for Vagrant
      command: yum install -y yum-utils shadow-utils

    - name: Add the Vagrant repository
      command: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo

    - name: Install Vagrant
      command: yum -y install vagrant

    - name: Install git
      shell: yum install -y git
      become: true

    - name: Create directory for the base VM
      file:
        path: "/tmp/ova_directory"
        state: directory
        mode: '0755'

    - name: Download the Wazuh virtual machines repository
      git:
        repo: "{{ wvm_repository }}"
        version: "{{ wvm_branch }}"
        dest: "/tmp/wazuh-virtual-machines"
      register: clone_result
      retries: 6
      delay: 10
      until: clone_result is success

    - name: Create base box
      shell: "./generate_base_box.sh"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      register: base_box_creation_result
      async: 1800
      poll: 0
      ignore_errors: yes

    - name: Wait for the base box creation to finish
      async_status:
        jid: "{{ base_box_creation_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    - name: Add the created box
      shell: "vagrant box add --name al2023 /tmp/wazuh-virtual-machines/ova/workflow_assets/al2023.box"

    - name: Destroy previous machines
      shell: |
        #!/bin/bash
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets
        machines=$(vagrant global-status --prune | awk '/running|saved|poweroff/ {print $1}')
        if [ -n "$machines" ]; then
          for id in $machines; do
            vagrant destroy -f $id
          done
        fi
      args:
        executable: /bin/bash
      become: true

    # ==========================================
    # AUMENTAR BOOT TIMEOUT EN VAGRANTFILE
    # ==========================================

    - name: Increase Vagrant boot timeout
      shell: |
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        # Backup original
        cp Vagrantfile Vagrantfile.original

        # Add boot_timeout configuration
        sed -i '/config.vm.hostname = "wazuh-server"/a \  \n  # Increase boot timeout for reliability\n  config.vm.boot_timeout = 900  # 15 minutes' Vagrantfile

        echo "=== Modified Vagrantfile ==="
        cat Vagrantfile
      register: vagrantfile_mod

    - name: Show Vagrantfile modification
      debug:
        var: vagrantfile_mod.stdout_lines

    # ==========================================
    # VAGRANT UP CON LOGGING MEJORADO
    # ==========================================

    - name: Run vagrant up with detailed failure logging
      shell: |
        #!/bin/bash
        MAX_RETRIES=5
        attempts=0
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        echo "=========================================="
        echo "Starting vagrant up attempts"
        echo "Time: $(date)"
        echo "=========================================="

        while true; do
          ((attempts++))
          start_time=$(date +%s)
          echo ""
          echo "=== Attempt $attempts started at $(date) ==="

          # Run vagrant up with logging
          if VAGRANT_LOG=info vagrant up > /tmp/vagrant_${attempts}.log 2>&1; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))

            echo "✓ SUCCESS on attempt $attempts"
            echo "  Duration: ${duration} seconds"
            echo "  Completed at: $(date)"

            # Show success details
            echo ""
            echo "=== VM Status ==="
            vagrant status

            echo ""
            echo "=== VM Info ==="
            vboxmanage showvminfo ova_base | grep -E "State:|Memory|CPUs|NIC"

            break
          else
            end_time=$(date +%s)
            duration=$((end_time - start_time))

            echo "✗ FAILED on attempt $attempts"
            echo "  Duration: ${duration} seconds"
            echo "  Failed at: $(date)"

            # Analyze failure
            echo ""
            echo "=== Failure Analysis ==="

            # Check for common error patterns
            if grep -q "Timed out while waiting for the machine to boot" /tmp/vagrant_${attempts}.log; then
              echo "  Error: Boot timeout - VM didn't respond in time"
            fi

            if grep -q "SSH authentication failed" /tmp/vagrant_${attempts}.log; then
              echo "  Error: SSH authentication issue"
            fi

            if grep -q "The following SSH command responded with a non-zero exit status" /tmp/vagrant_${attempts}.log; then
              echo "  Error: SSH command execution failed"
            fi

            # Show last lines of log
            echo ""
            echo "=== Last 25 lines of vagrant log ==="
            tail -25 /tmp/vagrant_${attempts}.log

            # Check VM state
            echo ""
            echo "=== VirtualBox VM State ==="
            if vboxmanage showvminfo ova_base >/dev/null 2>&1; then
              vboxmanage showvminfo ova_base | grep "State:"
            else
              echo "  VM does not exist"
            fi

            if [ $attempts -eq $MAX_RETRIES ]; then
              echo ""
              echo "=========================================="
              echo "Max attempts ($MAX_RETRIES) reached"
              echo "=========================================="

              # Create summary
              echo ""
              echo "=== Failure Summary ==="
              for i in $(seq 1 $attempts); do
                echo "Attempt $i:"
                if [ -f /tmp/vagrant_${i}.log ]; then
                  log_size=$(wc -l < /tmp/vagrant_${i}.log)
                  echo "  Log lines: $log_size"

                  # Check for specific errors
                  if grep -q "Timed out" /tmp/vagrant_${i}.log; then
                    echo "  Issue: Boot timeout"
                  elif grep -q "SSH" /tmp/vagrant_${i}.log && grep -q "auth\|fail" /tmp/vagrant_${i}.log; then
                    echo "  Issue: SSH authentication"
                  else
                    echo "  Issue: Unknown"
                  fi
                fi
              done

              echo ""
              echo "All logs saved to: /tmp/vagrant_*.log"
              exit 1
            fi

            # Cleanup and retry
            echo ""
            echo "=== Cleaning up for retry ==="
            vagrant destroy -f 2>&1 | head -5

            # Small delay before retry
            echo "Waiting 5 seconds before retry..."
            sleep 5
          fi
        done

        echo ""
        echo "=========================================="
        echo "Vagrant up completed successfully"
        echo "Total attempts needed: $attempts"
        echo "=========================================="
      args:
        executable: /bin/bash
      async: 3600  # 1 hour
      poll: 0
      register: vagrant_up_result
      become: true

    - name: Wait for vagrant up to finish
      async_status:
        jid: "{{ vagrant_up_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 60  # 60 minutes
      delay: 60

    - name: Show vagrant up results
      debug:
        var: job_result.stdout_lines
      when: job_result.stdout_lines is defined

    - name: Verify vagrant up succeeded
      fail:
        msg: "Vagrant up failed after all retries"
      when: job_result.rc != 0

    # ==========================================
    # CONTINUAR CON CONFIGURACIÓN
    # ==========================================

    - name: Copy the Python script to the VM
      shell: |
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets
        vagrant plugin install vagrant-scp
        vagrant scp ova_configurer.py :/tmp/ova_configurer.py
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      become: true

    - name: Execute Python script in the VM
      shell: "vagrant ssh -c 'sudo python3 /tmp/ova_configurer.py --wia_branch {{ wia_branch }} --wvm_branch {{ wvm_branch }} --repository {{ repository }} --debug {{ debug}}'"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      register: python_script_result
      async: 1800
      poll: 0

    - name: Wait for the Python script to finish
      async_status:
        jid: "{{ python_script_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    - name: Stop the VM
      shell: "vagrant halt"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"

    # ==========================================
    # AÑADIR RED PRIVADA DESPUÉS DE HALT
    # ==========================================

    - name: Add private network to VM (two-step approach)
      shell: |
        echo "=== Checking for host-only network ==="
        if ! vboxmanage list hostonlyifs | grep -q vboxnet0; then
          echo "Creating host-only network interface..."
          vboxmanage hostonlyif create
        else
          echo "Host-only interface vboxnet0 already exists"
        fi

        echo ""
        echo "=== Adding NIC2 to ova_base VM ==="
        vboxmanage modifyvm ova_base --nic2 hostonly
        vboxmanage modifyvm ova_base --hostonlyadapter2 vboxnet0
        vboxmanage modifyvm ova_base --cableconnected2 on

        echo ""
        echo "=== Verifying network configuration ==="
        vboxmanage showvminfo ova_base | grep "NIC 2"

        echo ""
        echo "✓ Private network added successfully"
      register: add_network_result

    - name: Show network addition results
      debug:
        var: add_network_result.stdout_lines

    # ==========================================
    # EXPORT OVA
    # ==========================================

    - name: Export the VM to OVA
      shell: |
        echo "=== Starting OVA export ==="
        echo "Timestamp: $(date)"

        vboxmanage export ova_base --output /home/ec2-user/{{ filename_ova }}

        echo ""
        echo "=== Export completed ==="
        echo "Timestamp: $(date)"
        ls -lh /home/ec2-user/{{ filename_ova }}
      register: export_result
      async: 1800
      poll: 0

    - name: Wait for export the OVA
      async_status:
        jid: "{{ export_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    - name: Change permissions to the OVA file
      file:
        path: /home/ec2-user/{{ filename_ova }}
        mode: '0755'

    # ==========================================
    # FINAL VALIDATION AND SUMMARY
    # ==========================================

    - name: Validate OVA and generate build summary
      shell: |
        echo "=========================================="
        echo "  OVA BUILD SUMMARY"
        echo "=========================================="
        echo ""

        echo "=== Build Information ==="
        echo "OVA File: {{ filename_ova }}"
        ls -lh /home/ec2-user/{{ filename_ova }}

        echo ""
        echo "=== OVA Validation ==="
        cd /tmp
        tar -xOf /home/ec2-user/{{ filename_ova }} '*.ovf' > /tmp/final_check.ovf

        nic_count=$(grep -c "rasd:ResourceType>10<" /tmp/final_check.ovf || echo "0")
        echo "Network adapters in OVA: $nic_count"

        if [ "$nic_count" -ge 2 ]; then
          echo "✓ OVA contains required NICs (eth0 + eth1)"
        else
          echo "⚠ WARNING: OVA may be missing eth1"
        fi

        echo ""
        echo "=== Vagrant Logs Available ==="
        ls -lh /tmp/vagrant_*.log 2>/dev/null || echo "No vagrant logs found"

        echo ""
        echo "=== Build Completed ==="
        echo "Timestamp: $(date)"
        echo "=========================================="
      register: final_summary

    - name: Show final summary
      debug:
        var: final_summary.stdout_lines