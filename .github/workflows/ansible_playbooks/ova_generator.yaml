- hosts: all
  become: true

  tasks:
    - name: Update all the packages
      yum:
        name: '*'
        state: latest

    - name: Install pip
      yum:
        name: python3-pip
        state: present

    - name: Download VirtualBox installer script
      get_url:
        url: https://download.virtualbox.org/virtualbox/7.1.4/VirtualBox-7.1.4-165100-Linux_amd64.run
        dest: /tmp/VirtualBox.run

    - name: Make the installer script executable
      file:
        path: /tmp/VirtualBox.run
        mode: '0755'

    - name: Install required packages for building kernel modules
      yum:
        name:
          - kernel-devel
          - kernel-headers
          - dkms
          - elfutils-libelf-devel
          - gcc
          - make
          - perl
        state: present
      become: true

    - name: Run VirtualBox installer script
      command: bash /tmp/VirtualBox.run
      become: true

    - name: Update all the packages
      yum:
        name: '*'
        state: latest

    - name: Install Development tools
      command: dnf groupinstall "Development Tools" -y
      become: true

    - name: Rebuild the VirtualBox kernel modules
      command: /sbin/vboxconfig

    - name: Install utilities for Vagrant
      command: yum install -y yum-utils shadow-utils

    - name: Add the Vagrant repository
      command: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo

    - name: Install Vagrant
      command: yum -y install vagrant

    - name: Install git
      shell: yum install -y git
      become: true

    - name: Create directory for the base VM
      file:
        path: "/tmp/ova_directory"
        state: directory
        mode: '0755'

    - name: Download the Wazuh virtual machines repository
      git:
        repo: "{{ wvm_repository }}"
        version: "{{ wvm_branch }}"
        dest: "/tmp/wazuh-virtual-machines"
      register: clone_result
      retries: 6
      delay: 10
      until: clone_result is success

    - name: Create base box
      shell: "./generate_base_box.sh"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      register: base_box_creation_result
      async: 1800
      poll: 0
      ignore_errors: yes

    - name: Wait for the base box creation to finish
      async_status:
        jid: "{{ base_box_creation_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    - name: Add the created box
      shell: "vagrant box add --name al2023 /tmp/wazuh-virtual-machines/ova/workflow_assets/al2023.box"

    - name: Destroy previous machines
      shell: |
        #!/bin/bash
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets
        machines=$(vagrant global-status --prune | awk '/running|saved|poweroff/ {print $1}')
        if [ -n "$machines" ]; then
          for id in $machines; do
            vagrant destroy -f $id
          done
        fi
      args:
        executable: /bin/bash
      register: vagrant_cleanup_result
      become: true

    # ==========================================
    # DIAGNÓSTICO ANTES DE VAGRANT UP
    # ==========================================

    - name: Pre-vagrant diagnostics
      shell: |
        echo "=========================================="
        echo "PRE-VAGRANT UP DIAGNOSTICS"
        echo "=========================================="
        echo ""

        echo "=== System Resources ==="
        free -h
        echo ""
        df -h /tmp
        echo ""

        echo "=== VirtualBox Status ==="
        vboxmanage --version
        lsmod | grep vbox
        echo ""

        echo "=== Vagrant Info ==="
        vagrant --version
        vagrant box list
        echo ""

        echo "=== Vagrantfile Content ==="
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets
        cat Vagrantfile
        echo ""

        echo "=== Existing VMs ==="
        vboxmanage list vms
        vboxmanage list runningvms
        echo ""

      register: pre_vagrant_diag

    - name: Show pre-vagrant diagnostics
      debug:
        var: pre_vagrant_diag.stdout_lines

    # ==========================================
    # VAGRANT UP CON LOGGING DETALLADO
    # ==========================================

    - name: Run vagrant up with detailed logging and timeout monitoring
      shell: |
        #!/bin/bash
        set -x

        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        echo "=========================================="
        echo "STARTING VAGRANT UP WITH DETAILED LOGGING"
        echo "Started at: $(date)"
        echo "=========================================="

        # Start vagrant up in background with full debug logging
        VAGRANT_LOG=debug vagrant up > /tmp/vagrant_debug.log 2>&1 &
        VAGRANT_PID=$!

        echo "Vagrant PID: $VAGRANT_PID"

        # Monitor for 10 minutes with detailed status updates
        elapsed=0
        max_wait=600  # 10 minutes

        while kill -0 $VAGRANT_PID 2>/dev/null; do
          sleep 30
          elapsed=$((elapsed + 30))

          echo ""
          echo "=== Status at ${elapsed} seconds ==="
          echo "Time: $(date)"

          # Check VirtualBox VM status
          if vboxmanage showvminfo ova_base >/dev/null 2>&1; then
            echo "VM exists, checking state:"
            vboxmanage showvminfo ova_base | grep -E "State:|Session name:"

            # Check if SSH port is open
            vm_state=$(vboxmanage showvminfo ova_base | grep "State:" | head -1)
            if echo "$vm_state" | grep -q "running"; then
              echo "VM is running, checking SSH port:"
              ss -tln | grep :2222 || echo "SSH port 2222 not listening yet"
            fi
          else
            echo "VM 'ova_base' does not exist yet"
          fi

          # Show last 10 lines of vagrant output
          echo ""
          echo "Last 10 lines of vagrant log:"
          tail -10 /tmp/vagrant_debug.log | sed 's/^/  /'

          # Check for specific error patterns
          if grep -q "Timed out" /tmp/vagrant_debug.log; then
            echo "⚠ WARNING: Found 'Timed out' in logs"
          fi
          if grep -q "SSH auth method" /tmp/vagrant_debug.log; then
            echo "⚠ WARNING: SSH authentication issue detected"
          fi
          if grep -q "Waiting for machine to boot" /tmp/vagrant_debug.log; then
            echo "ℹ INFO: Waiting for machine to boot (this is normal)"
          fi

          # Timeout check
          if [ $elapsed -ge $max_wait ]; then
            echo ""
            echo "=========================================="
            echo "TIMEOUT after ${max_wait} seconds"
            echo "=========================================="

            echo ""
            echo "=== Killing vagrant process ==="
            kill -TERM $VAGRANT_PID 2>/dev/null
            sleep 5
            kill -9 $VAGRANT_PID 2>/dev/null || true

            echo ""
            echo "=== Last 100 lines of vagrant debug log ==="
            tail -100 /tmp/vagrant_debug.log

            echo ""
            echo "=== VirtualBox final state ==="
            vboxmanage list vms
            vboxmanage list runningvms
            if vboxmanage showvminfo ova_base >/dev/null 2>&1; then
              vboxmanage showvminfo ova_base
            fi

            exit 1
          fi
        done

        # Vagrant process finished, check result
        wait $VAGRANT_PID
        exit_code=$?

        echo ""
        echo "=========================================="
        if [ $exit_code -eq 0 ]; then
          echo "SUCCESS - Vagrant up completed"
          echo "Duration: ${elapsed} seconds"
        else
          echo "FAILED - Vagrant up failed with exit code: $exit_code"
          echo "Duration: ${elapsed} seconds"
          echo ""
          echo "=== Full vagrant debug log ==="
          cat /tmp/vagrant_debug.log
        fi
        echo "=========================================="

        exit $exit_code

      args:
        executable: /bin/bash
      register: vagrant_up_result
      ignore_errors: yes
      timeout: 900  # 15 minutes hard limit

    - name: Show vagrant up results
      debug:
        var: vagrant_up_result.stdout_lines

    - name: Save vagrant debug log for analysis
      shell: |
        if [ -f /tmp/vagrant_debug.log ]; then
          echo "=== VAGRANT DEBUG LOG AVAILABLE ==="
          echo "Log size: $(wc -l /tmp/vagrant_debug.log | awk '{print $1}') lines"
          echo ""
          echo "=== Searching for key patterns ==="
          echo ""
          echo "Boot timeouts:"
          grep -i "timed out\|timeout" /tmp/vagrant_debug.log | head -20 || echo "None found"
          echo ""
          echo "SSH issues:"
          grep -i "ssh\|authentication" /tmp/vagrant_debug.log | grep -i "error\|fail\|timeout" | head -20 || echo "None found"
          echo ""
          echo "Network issues:"
          grep -i "network\|interface\|adapter" /tmp/vagrant_debug.log | grep -i "error\|fail" | head -20 || echo "None found"
          echo ""
          echo "Last 50 lines:"
          tail -50 /tmp/vagrant_debug.log
        fi
      register: log_analysis
      ignore_errors: yes

    - name: Show log analysis
      debug:
        var: log_analysis.stdout_lines

    - name: Fail playbook if vagrant up failed
      fail:
        msg: "Vagrant up failed. Check logs above for details."
      when: vagrant_up_result.rc != 0