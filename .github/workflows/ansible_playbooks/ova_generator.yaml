- hosts: all
  become: true

  tasks:
    - name: Update all the packages
      yum:
        name: '*'
        state: latest

    - name: Install pip
      yum:
        name: python3-pip
        state: present

    - name: Download VirtualBox installer script
      get_url:
        url: https://download.virtualbox.org/virtualbox/7.1.4/VirtualBox-7.1.4-165100-Linux_amd64.run
        dest: /tmp/VirtualBox.run

    - name: Make the installer script executable
      file:
        path: /tmp/VirtualBox.run
        mode: '0755'

    - name: Install required packages for building kernel modules
      yum:
        name:
          - kernel-devel
          - kernel-headers
          - dkms
          - elfutils-libelf-devel
          - gcc
          - make
          - perl
        state: present
      become: true

    - name: Run VirtualBox installer script
      command: bash /tmp/VirtualBox.run
      become: true

    - name: Update all the packages
      yum:
        name: '*'
        state: latest

    - name: Install Development tools
      command: dnf groupinstall "Development Tools" -y
      become: true

    - name: Rebuild the VirtualBox kernel modules
      command: /sbin/vboxconfig

    - name: Install utilities for Vagrant
      command: yum install -y yum-utils shadow-utils

    - name: Add the Vagrant repository
      command: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo

    - name: Install Vagrant
      command: yum -y install vagrant

    - name: Install git
      shell: yum install -y git
      become: true

    - name: Create directory for the base VM
      file:
        path: "/tmp/ova_directory"
        state: directory
        mode: '0755'

    - name: Download the Wazuh virtual machines repository
      git:
        repo: "{{ wvm_repository }}"
        version: "{{ wvm_branch }}"
        dest: "/tmp/wazuh-virtual-machines"
      register: clone_result
      retries: 6
      delay: 10
      until: clone_result is success

    - name: Create base box
      shell: "./generate_base_box.sh"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      register: base_box_creation_result
      async: 1800
      poll: 0
      ignore_errors: yes

    - name: Wait for the base box creation to finish
      async_status:
        jid: "{{ base_box_creation_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    # ==========================================
    # NUEVO: MOSTRAR LOGS COMPLETOS DE GENERATE_BASE_BOX
    # ==========================================

    - name: Show generate_base_box.sh stdout (full output)
      debug:
        var: job_result.stdout_lines
      when: job_result.stdout_lines is defined

    - name: Show generate_base_box.sh stderr (errors/warnings)
      debug:
        var: job_result.stderr_lines
      when: job_result.stderr_lines is defined

    - name: Search for Guest Additions messages in output
      shell: |
        echo "=== Searching for Guest Additions related messages ==="
        echo ""

        # Buscar en stdout
        if [ -f "/root/.ansible_async/{{ job_result.ansible_job_id }}" ]; then
          echo "=== Guest Additions installation messages ==="
          grep -i "guest additions\|vboxguest\|vboxadd\|vboxservice" "/root/.ansible_async/{{ job_result.ansible_job_id }}" || echo "No Guest Additions messages found in async output"

          echo ""
          echo "=== Module verification messages ==="
          grep -i "module.*load\|modprobe\|\.ko exists" "/root/.ansible_async/{{ job_result.ansible_job_id }}" || echo "No module messages found"

          echo ""
          echo "=== Validation messages ==="
          grep -i "validated\|✓\|✗\|ERROR:" "/root/.ansible_async/{{ job_result.ansible_job_id }}" || echo "No validation messages found"
        else
          echo "Async results file not found"
        fi
      register: guest_additions_search
      ignore_errors: yes

    - name: Show Guest Additions search results
      debug:
        var: guest_additions_search.stdout_lines
      when: guest_additions_search.stdout_lines is defined

    - name: Verify base box was created successfully
      shell: |
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        echo "=== Base box file ==="
        ls -lh al2023.box

        echo ""
        echo "=== Box file size ==="
        du -h al2023.box
      register: box_verification

    - name: Show box verification
      debug:
        var: box_verification.stdout_lines

    - name: Add the created box
      shell: "vagrant box add --name al2023 /tmp/wazuh-virtual-machines/ova/workflow_assets/al2023.box"

    - name: Destroy previous machines
      shell: |
        #!/bin/bash
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets
        machines=$(vagrant global-status --prune | awk '/running|saved|poweroff/ {print $1}')
        if [ -n "$machines" ]; then
          for id in $machines; do
            vagrant destroy -f $id
          done
        fi
      args:
        executable: /bin/bash
      become: true

    - name: Verify Vagrantfile configuration
      shell: |
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        echo "=== Current Vagrantfile Configuration ==="
        echo ""

        echo "Boot timeout setting:"
        grep -n "boot_timeout" Vagrantfile || echo "  No boot_timeout found (will use default 300s)"

        echo ""
        echo "SSH configuration:"
        grep -n "ssh\." Vagrantfile | head -10

        echo ""
        echo "Network configuration:"
        grep -n "vm.network" Vagrantfile || echo "  Private network is commented (as expected)"

        echo ""
        echo "Provider settings:"
        grep -n -A8 "vm.provider" Vagrantfile
      register: vagrantfile_check

    - name: Show Vagrantfile configuration
      debug:
        var: vagrantfile_check.stdout_lines

    # ==========================================
    # VAGRANT UP CON DIAGNÓSTICO DETALLADO
    # ==========================================

    - name: Run vagrant up with detailed diagnostics
      shell: |
        #!/bin/bash
        MAX_RETRIES=5
        attempts=0
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        echo "=========================================="
        echo "Vagrant Up - Diagnostic Mode"
        echo "Started: $(date)"
        echo "=========================================="

        while true; do
          ((attempts++))
          start_time=$(date +%s)

          echo ""
          echo "=== Attempt $attempts started at $(date) ==="

          # Run vagrant up with detailed logging
          if VAGRANT_LOG=info vagrant up > /tmp/vagrant_${attempts}.log 2>&1; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))

            echo "✓ SUCCESS on attempt $attempts"
            echo "  Duration: ${duration} seconds ($(($duration / 60)) min $(($duration % 60)) sec)"
            echo "  Completed: $(date)"

            # Show success details
            echo ""
            echo "=== VM Status ==="
            vagrant status

            echo ""
            echo "=== Log size ==="
            ls -lh /tmp/vagrant_${attempts}.log

            break
          else
            end_time=$(date +%s)
            duration=$((end_time - start_time))

            echo "✗ FAILED on attempt $attempts"
            echo "  Duration: ${duration} seconds ($(($duration / 60)) min $(($duration % 60)) sec)"
            echo "  Failed: $(date)"
            echo "  Log size: $(ls -lh /tmp/vagrant_${attempts}.log | awk '{print $5}')"

            # Detailed failure analysis
            echo ""
            echo "=== Failure Analysis ==="

            # Check for Vagrantfile errors
            if grep -q "shouldn't exist" /tmp/vagrant_${attempts}.log; then
              echo "  ⚠ Vagrantfile configuration error detected"
              grep "shouldn't exist\|deprecated\|invalid" /tmp/vagrant_${attempts}.log | head -5
            fi

            # Check for specific error patterns
            if grep -q "Timed out while waiting for the machine to boot" /tmp/vagrant_${attempts}.log; then
              echo "  ⚠ Boot timeout detected"

              # Find when timeout occurred
              echo ""
              echo "  Timeline of boot attempt:"
              grep -n "Waiting for machine to boot\|Checking if box\|SSH address:\|Timed out" /tmp/vagrant_${attempts}.log | head -10
            fi

            if grep -q "SSH authentication failed" /tmp/vagrant_${attempts}.log; then
              echo "  ⚠ SSH authentication issue"
            fi

            if grep -q "Guest Additions" /tmp/vagrant_${attempts}.log; then
              echo "  ℹ Guest Additions messages found"
              grep -n "Guest Additions" /tmp/vagrant_${attempts}.log | head -3
            fi

            # Check for VirtualBox errors
            if grep -q "VBoxManage\|VERR_\|NS_ERROR" /tmp/vagrant_${attempts}.log; then
              echo "  ⚠ VirtualBox errors detected"
              grep -n "VBoxManage\|VERR_\|NS_ERROR" /tmp/vagrant_${attempts}.log | head -5
            fi

            # Show last significant lines before timeout
            echo ""
            echo "=== Last 30 lines before failure ==="
            tail -30 /tmp/vagrant_${attempts}.log

            # Check VM state in VirtualBox
            echo ""
            echo "=== VirtualBox VM State ==="
            if vboxmanage showvminfo ova_base >/dev/null 2>&1; then
              vboxmanage showvminfo ova_base | grep -E "State:|Session"
            else
              echo "  VM does not exist"
            fi

            if [ $attempts -eq $MAX_RETRIES ]; then
              echo ""
              echo "=========================================="
              echo "Max attempts reached ($MAX_RETRIES)"
              echo "=========================================="

              # Generate failure summary
              echo ""
              echo "=== Failure Summary ==="
              for i in $(seq 1 $attempts); do
                if [ -f /tmp/vagrant_${i}.log ]; then
                  size=$(ls -lh /tmp/vagrant_${i}.log | awk '{print $5}')
                  lines=$(wc -l < /tmp/vagrant_${i}.log)

                  echo ""
                  echo "Attempt $i:"
                  echo "  Log size: $size ($lines lines)"

                  if grep -q "shouldn't exist" /tmp/vagrant_${i}.log; then
                    echo "  Issue: Vagrantfile configuration error"
                    grep "shouldn't exist" /tmp/vagrant_${i}.log | head -2
                  elif grep -q "Timed out" /tmp/vagrant_${i}.log; then
                    echo "  Issue: Boot timeout"
                  elif grep -q "SSH" /tmp/vagrant_${i}.log && grep -q -i "fail\|refuse" /tmp/vagrant_${i}.log; then
                    echo "  Issue: SSH connection/authentication"
                  else
                    echo "  Issue: Unknown - check log file"
                  fi
                fi
              done

              echo ""
              echo "All logs available at: /tmp/vagrant_*.log"
              exit 1
            fi

            # Cleanup and prepare for retry
            echo ""
            echo "=== Cleaning up for retry ==="
            vagrant destroy -f 2>&1 | head -5

            echo "Waiting 5 seconds before retry..."
            sleep 5
          fi
        done

        echo ""
        echo "=========================================="
        echo "SUCCESS - Vagrant up completed"
        echo "Total attempts: $attempts"
        echo "Completed: $(date)"
        echo "=========================================="
      args:
        executable: /bin/bash
      async: 3600  # 1 hour
      poll: 0
      register: vagrant_up_result
      become: true

    - name: Wait for vagrant up to finish
      async_status:
        jid: "{{ vagrant_up_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 60
      delay: 60

    - name: Show vagrant up results
      debug:
        var: job_result.stdout_lines

    # ==========================================
    # VERIFICAR GUEST ADDITIONS EN VM CORRIENDO
    # ==========================================

    - name: Check Guest Additions in running VM
      shell: |
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets

        echo "=== Checking Guest Additions in running VM ==="
        echo ""

        echo "Kernel modules loaded:"
        vagrant ssh -c "lsmod | grep vbox" || echo "⚠ No VirtualBox modules loaded"

        echo ""
        echo "VBoxControl version:"
        vagrant ssh -c "VBoxControl --version" || echo "⚠ VBoxControl not available"

        echo ""
        echo "VBoxAdd service status:"
        vagrant ssh -c "systemctl status vboxadd.service --no-pager" || echo "⚠ vboxadd service not running"

        echo ""
        echo "VBoxAdd-service status:"
        vagrant ssh -c "systemctl status vboxadd-service.service --no-pager" || echo "⚠ vboxadd-service not running"

        echo ""
        echo "VM Boot messages (VirtualBox related):"
        vagrant ssh -c "dmesg | grep -i 'vbox\|guest'" | tail -20 || echo "No VirtualBox messages in dmesg"

        echo ""
        echo "Check if module files exist:"
        vagrant ssh -c "ls -lh /lib/modules/\$(uname -r)/misc/vbox*.ko" || echo "⚠ Module files not found"
      register: guest_additions_check
      when: job_result.rc == 0

    - name: Show Guest Additions check results
      debug:
        var: guest_additions_check.stdout_lines
      when: guest_additions_check.stdout_lines is defined

    # ==========================================
    # CONTINUAR CON RESTO DEL BUILD
    # ==========================================

    - name: Copy the Python script to the VM
      shell: |
        cd /tmp/wazuh-virtual-machines/ova/workflow_assets
        vagrant plugin install vagrant-scp
        vagrant scp ova_configurer.py :/tmp/ova_configurer.py
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      become: true

    - name: Execute Python script in the VM
      shell: "vagrant ssh -c 'sudo python3 /tmp/ova_configurer.py --wia_branch {{ wia_branch }} --wvm_branch {{ wvm_branch }} --repository {{ repository }} --debug {{ debug}}'"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"
      register: python_script_result
      async: 1800
      poll: 0

    - name: Wait for the Python script to finish
      async_status:
        jid: "{{ python_script_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    - name: Stop the VM
      shell: "vagrant halt"
      args:
        chdir: "/tmp/wazuh-virtual-machines/ova/workflow_assets"

    - name: Add private network to VM
      shell: |
        echo "=== Adding host-only network ==="
        if ! vboxmanage list hostonlyifs | grep -q vboxnet0; then
          echo "Creating host-only network interface..."
          vboxmanage hostonlyif create
        else
          echo "Host-only interface vboxnet0 already exists"
        fi

        echo ""
        echo "=== Configuring NIC2 ==="
        vboxmanage modifyvm ova_base --nic2 hostonly
        vboxmanage modifyvm ova_base --hostonlyadapter2 vboxnet0
        vboxmanage modifyvm ova_base --cableconnected2 on

        echo ""
        echo "=== Verifying configuration ==="
        vboxmanage showvminfo ova_base | grep "NIC 2"

        echo ""
        echo "✓ Private network configured"
      register: network_config

    - name: Show network configuration
      debug:
        var: network_config.stdout_lines

    - name: Export the VM to OVA
      shell: "vboxmanage export ova_base --output /home/ec2-user/{{ filename_ova }}"
      register: export_result
      async: 1800
      poll: 0

    - name: Wait for export the OVA
      async_status:
        jid: "{{ export_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 60

    - name: Change permissions to the OVA file
      file:
        path: /home/ec2-user/{{ filename_ova }}
        mode: '0755'

    # ==========================================
    # RESUMEN FINAL
    # ==========================================

    - name: Generate build summary
      shell: |
        echo "=========================================="
        echo "  BUILD SUMMARY"
        echo "=========================================="
        echo ""

        echo "=== Build Information ==="
        echo "OVA: {{ filename_ova }}"
        ls -lh /home/ec2-user/{{ filename_ova }}
        echo "Completed: $(date)"

        echo ""
        echo "=== Vagrant Attempts ==="
        vagrant_logs=$(ls -1 /tmp/vagrant_*.log 2>/dev/null | wc -l)
        echo "Total attempts: $vagrant_logs"

        if [ $vagrant_logs -gt 0 ]; then
          echo ""
          echo "Attempt details:"
          for log in /tmp/vagrant_*.log; do
            attempt=$(basename $log | sed 's/vagrant_\(.*\)\.log/\1/')
            size=$(ls -lh $log | awk '{print $5}')
            lines=$(wc -l < $log)
            echo "  Attempt $attempt: $size ($lines lines)"
          done
        fi

        echo ""
        echo "=== Key Findings ==="
        if [ -f /tmp/vagrant_1.log ]; then
          if grep -q "shouldn't exist" /tmp/vagrant_1.log; then
            echo "⚠ Vagrantfile had configuration errors (fixed in later attempts)"
          fi

          if grep -q "Guest Additions" /tmp/vagrant_1.log; then
            echo "ℹ Guest Additions activity detected in logs"
          fi
        fi

        echo ""
        echo "=========================================="
      register: build_summary

    - name: Show build summary
      debug:
        var: build_summary.stdout_lines