run-name: Build AMI - Wazuh virtual machines ${{ inputs.id }} - Branch ${{ github.ref_name }} - Launched by @${{ github.actor }}
name: Build AMI

on:
  workflow_dispatch:
    inputs:
      id:
        description: "ID used to identify the workflow uniquely."
        type: string
        required: false
      wazuh_virtual_machines_reference:
        description: 'Branch or tag of the wazuh-virtual-machines repository'
        required: true
      wazuh_automation_reference:
        description: 'Branch or tag of the wazuh-automation repository'
        required: true
<<<<<<< HEAD
        default: '4.13.0'
      wazuh_installation_assistant_reference:
        description: 'Branch or tag of the wazuh-installation-assistant repository'
        required: true
        default: '4.13.0'
      debug:
        description: 'Verbosity level on playbooks execution'
        required: true
        default: '-v'
        type: choice
        options:
          - -v
          - -vv
          - -vvv
          - -vvvv
=======
        default: '6.0.0'
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206
      ami_revision:
        description: |
          'For AMI candidates must be a number, e,g: -1.'
          'To build a development AMI, use another revision format, e.g: -dev'
        required: false
        default: '-1'
<<<<<<< HEAD
      destroy:
        type: boolean
=======
      wazuh_package_type:
        description: 'Wazuh package type to be used in the AMI'
        required: true
        default: 'dev'
        type: choice
        options:
          - prod
          - pre-prod
          - dev
      commit_list:
        description: |
          'Wazuh components revisions (comma-separated string list) ["indexer-revision", "server-revision", "dashboard-revision"]'
          (Only needed if the Wazuh package type is dev-latest or dev-commit)
        required: true
        default: '["latest", "latest", "latest", "latest"]'
        type: string
      destroy:
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206
        description: 'Destroy the base instance after the AMI is created'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      id:
        type: string
        required: false

env:
<<<<<<< HEAD
    COMPOSITE_NAME: "linux-amazon-2023ami-amd64"
=======
    COMPOSITE_NAME: "linux-amazon-2023-amd64"
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206
    ALLOCATOR_PATH: "/tmp/allocatorvm_ami"
    WORKFLOW_VENV: "${{ github.workspace }}/workflow_venv"
    COMMIT_LIST: ${{ inputs.commit_list }}
    PROD_ARTIFACTS_URLS_BUCKET: ${{ vars.AWS_S3_BUCKET_PROD }}
    PRE_PROD_ARTIFACTS_URLS_BUCKET: ${{ vars.AWS_S3_BUCKET_PRE }}
    DEV_ARTIFACTS_URLS_BUCKET: ${{ vars.AWS_S3_BUCKET_ARTIFACTS }}
    ARTIFACTS_URLS_FILENAME: "artifacts_urls.yml"
    DEV_ARTIFACTS_URLS_PATH: "deployment/WAZUH_MINOR"
    GENERATE_PRESIGNED_URLS_SCRIPT_PATH: ${{ github.workspace }}/.github/scripts/generate_presigned_dev_urls.py

permissions:
  id-token: write
  contents: read

jobs:
  Build_AMI:
    runs-on: ubuntu-22.04
    steps:
      - name: View parameters
        run: echo "${{ toJson(inputs) }}"

      - name: Checkout wazuh/wazuh-virtual-machines repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.wazuh_virtual_machines_reference }}
<<<<<<< HEAD
=======

      - name: Checkout wazuh/wazuh-automation repository
        uses: actions/checkout@v4
        with:
          repository: wazuh/wazuh-automation
          ref: ${{ inputs.wazuh_automation_reference }}
          token: ${{ secrets.GH_CLONE_TOKEN }}
          path: wazuh-automation
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_OVA_ROLE }}
          aws-region: us-east-1

<<<<<<< HEAD
      - name: Install jq
        run: sudo apt-get install jq
=======
      - name: Install and configure python and workflow dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          sudo apt-get install -y python3 python3-venv
          python3 -m venv ${{ env.WORKFLOW_VENV }}
          source ${{ env.WORKFLOW_VENV }}/bin/activate
          pip install --upgrade pip
          pip install hatch pyyaml
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206

      - name: Get Wazuh version
        run: |
            WAZUH_VERSION=$(jq -r '.version' VERSION.json)
<<<<<<< HEAD
            echo WAZUH_VERSION=$WAZUH_VERSION >> $GITHUB_ENV

      - name: Install Python and create virtual environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          python3 -m venv ami_env
          source ami_env/bin/activate
          python3 -m pip install --upgrade pip
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Install Ansible
        run: |
          python3 -m pip install ansible-core==2.16

      - name: Ansible version
        run: ansible --version

      - name: Checkout wazuh/wazuh-automation repository
        uses: actions/checkout@v4
        with:
          repository: wazuh/wazuh-automation
          ref: ${{ inputs.wazuh_automation_reference }}
          token: ${{ secrets.GH_CLONE_TOKEN }}
          path: wazuh-automation

      - name: Install and set allocator requirements
        run: |
          python3 -m pip install -r wazuh-automation/deployability/deps/requirements.txt
=======
            WAZUH_MINOR=$(echo "$WAZUH_VERSION" | cut -d '.' -f 1-2)
            echo WAZUH_VERSION=$WAZUH_VERSION >> $GITHUB_ENV
            echo WAZUH_MINOR=$WAZUH_MINOR >> $GITHUB_ENV

      - name: Install and set allocator requirements
        run: |
          pip install -r wazuh-automation/deployability/deps/requirements.txt
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206

      - name: Execute allocator module that will create the base instance
        id: alloc_vm_ami
        run: |
          python wazuh-automation/deployability/modules/allocation/main.py --action create --provider aws --size large --composite-name ${{ env.COMPOSITE_NAME }} --working-dir ${{ env.ALLOCATOR_PATH }} \
            --track-output ${{ env.ALLOCATOR_PATH }}/track.yml --inventory-output ${{ env.ALLOCATOR_PATH }}/inventory.yml --instance-name gha_${{ github.run_id }}_ami_build \
            --label-team devops --label-termination-date 1d
<<<<<<< HEAD
          sed -n '/hosts:/,/^[^ ]/p' ${{ env.ALLOCATOR_PATH }}/inventory.yml | grep "ansible_" | sed 's/^[ ]*//g' > ${{ env.ALLOCATOR_PATH }}/inventory_mod.yml

          sed 's/: */=/g' ${{ env.ALLOCATOR_PATH }}/inventory_mod.yml > ${{ env.ALLOCATOR_PATH }}/inventory_vars.yml
          sed -n 's/^identifier: \(.*\)$/identifier=\1/p' ${{ env.ALLOCATOR_PATH }}/track.yml >> ${{ env.ALLOCATOR_PATH }}/inventory_vars.yml
          source ${{ env.ALLOCATOR_PATH }}/inventory_vars.yml

          echo "::add-mask::$ansible_host"
          echo "::add-mask::$ansible_port"
          echo "::add-mask::$ansible_user"
          echo "::add-mask::$ansible_ssh_private_key_file"
          echo "::add-mask::$ansible_ssh_common_args"
          echo "::add-mask::$identifier"

          cat "${{ env.ALLOCATOR_PATH }}/inventory_vars.yml" >> $GITHUB_ENV

      - name: Generate inventory
=======
          INSTANCE_ID=$(yq '.all.hosts | keys | .[0]' ${{ env.ALLOCATOR_PATH }}/inventory.yml)
          echo INSTANCE_ID=$INSTANCE_ID >> $GITHUB_ENV

      - name: Get artifacts URLs file
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206
        run: |
          LOCAL_ARTIFACTS_URLS_FILEPATH=${{ github.workspace }}/${{ env.ARTIFACTS_URLS_FILENAME }}
          echo LOCAL_ARTIFACTS_URLS_FILEPATH=$LOCAL_ARTIFACTS_URLS_FILEPATH >> $GITHUB_ENV

          if [ "${{ inputs.wazuh_package_type }}" == "prod" ]; then
            aws s3api get-object --bucket ${{ env.PROD_ARTIFACTS_URLS_BUCKET }} --key ${{ env.WAZUH_MINOR }}/${{ env.ARTIFACTS_URLS_FILENAME }} $LOCAL_ARTIFACTS_URLS_FILEPATH
          elif [ "${{ inputs.wazuh_package_type }}" == "pre-prod" ]; then
            aws s3api get-object --bucket ${{ env.PRE_PROD_ARTIFACTS_URLS_BUCKET }} --key ${{ env.WAZUH_MINOR }}/${{ env.ARTIFACTS_URLS_FILENAME }} $LOCAL_ARTIFACTS_URLS_FILEPATH
          else
            PARSED_DEV_ARTIFACTS_URLS_PATH=$(echo "${{ env.DEV_ARTIFACTS_URLS_PATH }}" | sed "s|WAZUH_MINOR|${{ env.WAZUH_MINOR }}|")
            aws s3api get-object --bucket ${{ env.DEV_ARTIFACTS_URLS_BUCKET }} --key $PARSED_DEV_ARTIFACTS_URLS_PATH/${{ env.ARTIFACTS_URLS_FILENAME }} $LOCAL_ARTIFACTS_URLS_FILEPATH
          fi

<<<<<<< HEAD
      - name: Run Ansible playbook to install Wazuh components
        run: |
          ansible-playbook -i ${{ env.ALLOCATOR_PATH }}/inventory_ansible.ini \
          ${{ env.PLAYBOOKS_PATH }}/build_ami_packages.yaml \
          --extra-vars "installation_assistant_reference=${{ inputs.wazuh_installation_assistant_reference }}" \
          "${{ inputs.debug }}"

=======
      - name: Generate presigned URLs for artifacts for dev packages
        if: inputs.wazuh_package_type == 'dev'
        run: |
          python ${{ env.GENERATE_PRESIGNED_URLS_SCRIPT_PATH }}

      - name: Execute configuration AMI process
        run: |
          source ${{ env.WORKFLOW_VENV }}/bin/activate
          hatch run dev:run --inventory ${{ env.ALLOCATOR_PATH }}/inventory.yml --packages-url-path ${{ env.LOCAL_ARTIFACTS_URLS_FILEPATH }} --execute all-ami
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206

      - name: Stop instance
        run: |
          aws ec2 stop-instances --instance-ids ${{ env.INSTANCE_ID }}

      - name: Check EC2 instance status until stopped
        id: check_status
        run: |
          TIMEOUT=120
          INTERVAL=2
          ELAPSED=0

          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query 'Reservations[*].Instances[*].State.Name' --output text)
            echo "Instance status: $STATUS"

            if [ "$STATUS" == "stopped" ]; then
              echo "Instance is stopped."
              break
            fi

            echo "Waiting for instance to stop..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Timeout reached. The instance is still not stopped."
            exit 1
          fi

      - name: Build AMI from instance
        if: success()
        run: |
          AMI_NAME="Wazuh_v${{ env.WAZUH_VERSION }}${{ inputs.ami_revision }}"
<<<<<<< HEAD
          aws ec2 create-image --instance-id ${{ env.identifier }} --name "$AMI_NAME" --no-reboot
=======
          aws ec2 create-image --instance-id ${{ env.INSTANCE_ID }} --name "$AMI_NAME" --no-reboot
>>>>>>> 46c7f05b674b2de000e7b6c3fa33ff44677d9206
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=$AMI_NAME" --query 'Images[*].ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "AMI creation started with name $AMI_NAME"

      - name: Check AMI status until available
        id: check_ami_status
        run: |
          TIMEOUT=1800
          INTERVAL=30
          ELAPSED=0

          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(aws ec2 describe-images --image-ids ${{ env.AMI_ID }} --query 'Images[*].State' --output text)
            echo "AMI status: $STATUS"

            if [ "$STATUS" == "available" ]; then
              echo "AMI is available."
              break
            fi

            echo "Waiting for AMI ${{ env.AMI_ID }} to be available..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Timeout reached. The AMI ${{ env.AMI_ID }} is still not available."
            exit 1
          fi

      - name: Tag AMI
        if: success()
        run: |
          aws ec2 create-tags --resources ${{ env.AMI_ID }} --tags Key=Name,Value="Wazuh_v${{ env.WAZUH_VERSION }}${{ inputs.ami_revision }}"

      - name: Delete allocated VM
        if: always() && steps.alloc_vm_ami.outcome == 'success' && inputs.destroy == true
        run: python3 wazuh-automation/deployability/modules/allocation/main.py --action delete --track-output ${{ env.ALLOCATOR_PATH }}/track.yml

      - name: Compress Allocator directory
        id: generate_artifacts
        if: always() && steps.alloc_vm_ami.outcome == 'success' && inputs.destroy == false
        run: zip -P "${{ secrets.ZIP_ARTIFACTS_PASSWORD }}" -r ${{ env.ALLOCATOR_PATH }}.zip ${{ env.ALLOCATOR_PATH }}
        continue-on-error: true

      - name: Upload Allocator directory as artifact
        if: always() && steps.generate_artifacts.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: instance_info
          path: ${{ env.ALLOCATOR_PATH }}.zip
